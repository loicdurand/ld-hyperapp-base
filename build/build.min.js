
(function(l, i, v, e) { v = l.createElement(i); v.async = 1; v.src = '//' + (location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; e = l.getElementsByTagName(i)[0]; e.parentNode.insertBefore(v, e)})(document, 'script');
(function () {
  'use strict';

  

  function ___$insertStyle(css) {
    if (!css) {
      return;
    }
    if (typeof window === 'undefined') {
      return;
    }

    var style = document.createElement('style');

    style.setAttribute('type', 'text/css');
    style.innerHTML = css;
    document.head.appendChild(style);
    return css;
  }

  function h(name, attributes) {
    var rest = [];
    var children = [];
    var length = arguments.length;

    while (length-- > 2) rest.push(arguments[length]);

    while (rest.length) {
      var node = rest.pop();
      if (node && node.pop) {
        for (length = node.length; length--; ) {
          rest.push(node[length]);
        }
      } else if (node != null && node !== true && node !== false) {
        children.push(node);
      }
    }

    return typeof name === "function"
      ? name(attributes || {}, children)
      : {
          nodeName: name,
          attributes: attributes || {},
          children: children,
          key: attributes && attributes.key
        }
  }

  function app(state, actions, view, container) {
    var map = [].map;
    var rootElement = (container && container.children[0]) || null;
    var oldNode = rootElement && recycleElement(rootElement);
    var lifecycle = [];
    var skipRender;
    var isRecycling = true;
    var globalState = clone(state);
    var wiredActions = wireStateToActions([], globalState, clone(actions));

    scheduleRender();

    return wiredActions

    function recycleElement(element) {
      return {
        nodeName: element.nodeName.toLowerCase(),
        attributes: {},
        children: map.call(element.childNodes, function(element) {
          return element.nodeType === 3 // Node.TEXT_NODE
            ? element.nodeValue
            : recycleElement(element)
        })
      }
    }

    function resolveNode(node) {
      return typeof node === "function"
        ? resolveNode(node(globalState, wiredActions))
        : node != null
          ? node
          : ""
    }

    function render() {
      skipRender = !skipRender;

      var node = resolveNode(view);

      if (container && !skipRender) {
        rootElement = patch(container, rootElement, oldNode, (oldNode = node));
      }

      isRecycling = false;

      while (lifecycle.length) lifecycle.pop()();
    }

    function scheduleRender() {
      if (!skipRender) {
        skipRender = true;
        setTimeout(render);
      }
    }

    function clone(target, source) {
      var out = {};

      for (var i in target) out[i] = target[i];
      for (var i in source) out[i] = source[i];

      return out
    }

    function setPartialState(path, value, source) {
      var target = {};
      if (path.length) {
        target[path[0]] =
          path.length > 1
            ? setPartialState(path.slice(1), value, source[path[0]])
            : value;
        return clone(source, target)
      }
      return value
    }

    function getPartialState(path, source) {
      var i = 0;
      while (i < path.length) {
        source = source[path[i++]];
      }
      return source
    }

    function wireStateToActions(path, state, actions) {
      for (var key in actions) {
        typeof actions[key] === "function"
          ? (function(key, action) {
              actions[key] = function(data) {
                var result = action(data);

                if (typeof result === "function") {
                  result = result(getPartialState(path, globalState), actions);
                }

                if (
                  result &&
                  result !== (state = getPartialState(path, globalState)) &&
                  !result.then // !isPromise
                ) {
                  scheduleRender(
                    (globalState = setPartialState(
                      path,
                      clone(state, result),
                      globalState
                    ))
                  );
                }

                return result
              };
            })(key, actions[key])
          : wireStateToActions(
              path.concat(key),
              (state[key] = clone(state[key])),
              (actions[key] = clone(actions[key]))
            );
      }

      return actions
    }

    function getKey(node) {
      return node ? node.key : null
    }

    function eventListener(event) {
      return event.currentTarget.events[event.type](event)
    }

    function updateAttribute(element, name, value, oldValue, isSvg) {
      if (name === "key") ; else if (name === "style") {
        if (typeof value === "string") {
          element.style.cssText = value;
        } else {
          if (typeof oldValue === "string") oldValue = element.style.cssText = "";
          for (var i in clone(oldValue, value)) {
            var style = value == null || value[i] == null ? "" : value[i];
            if (i[0] === "-") {
              element.style.setProperty(i, style);
            } else {
              element.style[i] = style;
            }
          }
        }
      } else {
        if (name[0] === "o" && name[1] === "n") {
          name = name.slice(2);

          if (element.events) {
            if (!oldValue) oldValue = element.events[name];
          } else {
            element.events = {};
          }

          element.events[name] = value;

          if (value) {
            if (!oldValue) {
              element.addEventListener(name, eventListener);
            }
          } else {
            element.removeEventListener(name, eventListener);
          }
        } else if (
          name in element &&
          name !== "list" &&
          name !== "type" &&
          name !== "draggable" &&
          name !== "spellcheck" &&
          name !== "translate" &&
          !isSvg
        ) {
          element[name] = value == null ? "" : value;
        } else if (value != null && value !== false) {
          element.setAttribute(name, value);
        }

        if (value == null || value === false) {
          element.removeAttribute(name);
        }
      }
    }

    function createElement(node, isSvg) {
      var element =
        typeof node === "string" || typeof node === "number"
          ? document.createTextNode(node)
          : (isSvg = isSvg || node.nodeName === "svg")
            ? document.createElementNS(
                "http://www.w3.org/2000/svg",
                node.nodeName
              )
            : document.createElement(node.nodeName);

      var attributes = node.attributes;
      if (attributes) {
        if (attributes.oncreate) {
          lifecycle.push(function() {
            attributes.oncreate(element);
          });
        }

        for (var i = 0; i < node.children.length; i++) {
          element.appendChild(
            createElement(
              (node.children[i] = resolveNode(node.children[i])),
              isSvg
            )
          );
        }

        for (var name in attributes) {
          updateAttribute(element, name, attributes[name], null, isSvg);
        }
      }

      return element
    }

    function updateElement(element, oldAttributes, attributes, isSvg) {
      for (var name in clone(oldAttributes, attributes)) {
        if (
          attributes[name] !==
          (name === "value" || name === "checked"
            ? element[name]
            : oldAttributes[name])
        ) {
          updateAttribute(
            element,
            name,
            attributes[name],
            oldAttributes[name],
            isSvg
          );
        }
      }

      var cb = isRecycling ? attributes.oncreate : attributes.onupdate;
      if (cb) {
        lifecycle.push(function() {
          cb(element, oldAttributes);
        });
      }
    }

    function removeChildren(element, node) {
      var attributes = node.attributes;
      if (attributes) {
        for (var i = 0; i < node.children.length; i++) {
          removeChildren(element.childNodes[i], node.children[i]);
        }

        if (attributes.ondestroy) {
          attributes.ondestroy(element);
        }
      }
      return element
    }

    function removeElement(parent, element, node) {
      function done() {
        parent.removeChild(removeChildren(element, node));
      }

      var cb = node.attributes && node.attributes.onremove;
      if (cb) {
        cb(element, done);
      } else {
        done();
      }
    }

    function patch(parent, element, oldNode, node, isSvg) {
      if (node === oldNode) ; else if (oldNode == null || oldNode.nodeName !== node.nodeName) {
        var newElement = createElement(node, isSvg);
        parent.insertBefore(newElement, element);

        if (oldNode != null) {
          removeElement(parent, element, oldNode);
        }

        element = newElement;
      } else if (oldNode.nodeName == null) {
        element.nodeValue = node;
      } else {
        updateElement(
          element,
          oldNode.attributes,
          node.attributes,
          (isSvg = isSvg || node.nodeName === "svg")
        );

        var oldKeyed = {};
        var newKeyed = {};
        var oldElements = [];
        var oldChildren = oldNode.children;
        var children = node.children;

        for (var i = 0; i < oldChildren.length; i++) {
          oldElements[i] = element.childNodes[i];

          var oldKey = getKey(oldChildren[i]);
          if (oldKey != null) {
            oldKeyed[oldKey] = [oldElements[i], oldChildren[i]];
          }
        }

        var i = 0;
        var k = 0;

        while (k < children.length) {
          var oldKey = getKey(oldChildren[i]);
          var newKey = getKey((children[k] = resolveNode(children[k])));

          if (newKeyed[oldKey]) {
            i++;
            continue
          }

          if (newKey != null && newKey === getKey(oldChildren[i + 1])) {
            if (oldKey == null) {
              removeElement(element, oldElements[i], oldChildren[i]);
            }
            i++;
            continue
          }

          if (newKey == null || isRecycling) {
            if (oldKey == null) {
              patch(element, oldElements[i], oldChildren[i], children[k], isSvg);
              k++;
            }
            i++;
          } else {
            var keyedNode = oldKeyed[newKey] || [];

            if (oldKey === newKey) {
              patch(element, keyedNode[0], keyedNode[1], children[k], isSvg);
              i++;
            } else if (keyedNode[0]) {
              patch(
                element,
                element.insertBefore(keyedNode[0], oldElements[i]),
                keyedNode[1],
                children[k],
                isSvg
              );
            } else {
              patch(element, oldElements[i], null, children[k], isSvg);
            }

            newKeyed[newKey] = children[k];
            k++;
          }
        }

        while (i < oldChildren.length) {
          if (getKey(oldChildren[i]) == null) {
            removeElement(element, oldElements[i], oldChildren[i]);
          }
          i++;
        }

        for (var i in oldKeyed) {
          if (!newKeyed[i]) {
            removeElement(element, oldKeyed[i][0], oldKeyed[i][1]);
          }
        }
      }
      return element
    }
  }

  let // 
      tmp = false,
      _id = Math.floor(Math.random() * 1e6);

  const //
      cache = {},
      sheet = document.head.appendChild(document.createElement("style")).sheet,
      resetTmp = () => [h(tmp.nodeName, tmp.attributes, tmp.children), tmp = false][0],
      insert = rule => 1 + sheet.insertRule(rule, sheet.cssRules.length) && '',           // allways return ''
      isProp = str => /.*:.*;/.test(str),
      isSelector = str => /^(&|:|>|\.|\*|\[)/.test(str),
      isClosingBracket = str => /\s?}\s?/.test(str),
      isMediaQuery = str => /^@/.test(str),
      createRule = (decls, isScss = false) => {
          let //
              parentSelector = isScss ? '._this' : '&',
              id = ".P" + _id++,
              i = 0,
              rule = '',
              endline = /;|}|{/g,
              lines = decls.replace(endline, m => m + '|').split('|');
          lines.map(line => {
              line = line.trim();
              if (isProp(line)) {                                                         // eg: color: red;
                  rule += (i++ == 0 ? id + '{' + line : line);                            // rule = '.P1{ color: red;'
              } else if (!isClosingBracket(line)) {
                  if (i++ != 0)
                      rule = insert(rule + '}');                                          // insert(rule = '.P1{ color: red;}')
                  //                                                                         =================================
                  if (isSelector(line))                                                   // eg: :before, &:after, & .bold {
                      rule += id + line.replace(new RegExp(parentSelector, 'g'), id);      // rule = '.P1:before, .P1:after, .P1 .bold {'
                  //                                                                         ====================================
                  else if (isMediaQuery(line) && !!!(i = 0))                              // eg: @media (...) {
                      rule += line;                                                       // no change but new loop ( i == 0 )
              } else {                                                                    // then
                  i = !!(rule = insert(rule + ('@' == rule.charAt(0) ? '}}' : '}')));     // insert(@media(...){ .P1{ color: red;} })
              }
          });

          return id.slice(1);                                                             // return id = P1
      },

      style = nodeName => decls => (attributes = {}, children = attributes.children) => {
          if (tmp) return resetTmp();
          let isScss = typeof decls == 'string';
          let key = typeof decls == "function" ? decls(attributes) : decls.toString();
          cache[key] || (cache[key] = createRule(key, isScss));
          attributes.class = [attributes.class, cache[key]]
              .filter(Boolean)
              .join(" ");
          if (typeof nodeName != 'function')
              return h(nodeName, attributes, children);
          tmp = nodeName(attributes, children);
          tmp.attributes.class = attributes.class;
          return (typeof decls == 'function' && !nodeName.length) ? style(tmp.nodeName) : resetTmp();
      };

  var style$1 = new Proxy(style, {                   // Proxy allows you to write 
      //                                                          style.div`...`
      get: (target, key) => target(key)               // instead of 
      //                                                          style('div')(`...`)                `
  });

  function getOrigin(loc) {
    return loc.protocol + "//" + loc.hostname + (loc.port ? ":" + loc.port : "")
  }

  function isExternal(anchorElement) {
    // Location.origin and HTMLAnchorElement.origin are not
    // supported by IE and Safari.
    return getOrigin(location) !== getOrigin(anchorElement)
  }

  function Link(props, children) {
    return function(state, actions) {
      var to = props.to;
      var location = state.location;
      var onclick = props.onclick;
      delete props.to;
      delete props.location;

      props.href = to;
      props.onclick = function(e) {
        if (onclick) {
          onclick(e);
        }
        if (
          e.defaultPrevented ||
          e.button !== 0 ||
          e.altKey ||
          e.metaKey ||
          e.ctrlKey ||
          e.shiftKey ||
          props.target === "_blank" ||
          isExternal(e.currentTarget)
        ) ; else {
          e.preventDefault();

          if (to !== location.pathname) {
            history.pushState(location.pathname, "", to);
          }
        }
      };

      return h("a", props, children)
    }
  }

  function createMatch(isExact, path, url, params) {
    return {
      isExact: isExact,
      path: path,
      url: url,
      params: params
    }
  }

  function trimTrailingSlash(url) {
    for (var len = url.length; "/" === url[--len]; );
    return url.slice(0, len + 1)
  }

  function decodeParam(val) {
    try {
      return decodeURIComponent(val)
    } catch (e) {
      return val
    }
  }

  function parseRoute(path, url, options) {
    if (path === url || !path) {
      return createMatch(path === url, path, url)
    }

    var exact = options && options.exact;
    var paths = trimTrailingSlash(path).split("/");
    var urls = trimTrailingSlash(url).split("/");

    if (paths.length > urls.length || (exact && paths.length < urls.length)) {
      return
    }

    for (var i = 0, params = {}, len = paths.length, url = ""; i < len; i++) {
      if (":" === paths[i][0]) {
        params[paths[i].slice(1)] = urls[i] = decodeParam(urls[i]);
      } else if (paths[i] !== urls[i]) {
        return
      }
      url += urls[i] + "/";
    }

    return createMatch(false, path, url.slice(0, -1), params)
  }

  function Route(props) {
    return function(state, actions) {
      var location = state.location;
      var match = parseRoute(props.path, location.pathname, {
        exact: !props.parent
      });

      return (
        match &&
        props.render({
          match: match,
          location: location
        })
      )
    }
  }

  function Switch(props, children) {
    return function(state, actions) {
      var child,
        i = 0;
      while (
        !(child = children[i] && children[i](state, actions)) &&
        i < children.length
      )
        i++;
      return child
    }
  }

  function wrapHistory(keys) {
    return keys.reduce(function(next, key) {
      var fn = history[key];

      history[key] = function(data, title, url) {
        fn.call(this, data, title, url);
        dispatchEvent(new CustomEvent("pushstate", { detail: data }));
      };

      return function() {
        history[key] = fn;
        next && next();
      }
    }, null)
  }

  var location$1 = {
    state: {
      pathname: window.location.pathname,
      previous: window.location.pathname
    },
    actions: {
      go: function(pathname) {
        history.pushState(null, "", pathname);
      },
      set: function(data) {
        return data
      }
    },
    subscribe: function(actions) {
      function handleLocationChange(e) {
        actions.set({
          pathname: window.location.pathname,
          previous: e.detail
            ? (window.location.previous = e.detail)
            : window.location.previous
        });
      }

      var unwrap = wrapHistory(["pushState", "replaceState"]);

      addEventListener("pushstate", handleLocationChange);
      addEventListener("popstate", handleLocationChange);

      return function() {
        removeEventListener("pushstate", handleLocationChange);
        removeEventListener("popstate", handleLocationChange);
        unwrap();
      }
    }
  };

  var state = {

      location: location$1.state

  };

  var actions = {

      location: location$1.actions

  };

  var stylesheet = ___$insertStyle("._this h1 {\n  color: red;\n  border: 1px solid; }\n\n._this h2 {\n  color: blue; }\n  ._this h2.mod {\n    color: green; }");

  var _templateObject = _taggedTemplateLiteral(['\n    color: brown;\n    & .yellow{\n        color: yellow;\n    }\n'], ['\n    color: brown;\n    & .yellow{\n        color: yellow;\n    }\n']);

  function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

  var Ctnr = style$1.div(stylesheet);

  var H3 = style$1.h3(_templateObject);

  var HelloWorld = function HelloWorld(_ref) {
      var message = _ref.message;
      return h(
          Ctnr,
          null,
          h(
              'h1',
              null,
              ' ',
              message,
              ' '
          ),
          h(
              'h2',
              null,
              ' [components/helloworld] - specified in the SCSS file - I must be blue'
          ),
          h(
              H3,
              null,
              '[components/helloworld] - specified in the JS file - I must be brown and: ',
              h(
                  'span',
                  { 'class': 'yellow' },
                  'yellow'
              )
          ),
          h(
              'h2',
              { 'class': 'mod' },
              ' [components/helloworld] - specified in the SCSS file - I must be green'
          ),
          h('br', null)
      );
  };

  var config = { "App": { "testStr": "this text provides from a '/config.ini' file" } };

  var App = function App() {
      return function (state, actions) {
          return h(
              'div',
              null,
              h(HelloWorld, { message: '[components/helloworld] - specified in the SCSS file - I must be red and bordered' }),
              h('br', null),
              h(
                  Link,
                  { to: '/page' },
                  ' Click '
              ),
              h('br', null),
              h(
                  'h3',
                  null,
                  'test: "',
                  config.App.testStr,
                  '"'
              )
          );
      };
  };

  var Page = function Page() {
          return h(
                  'div',
                  null,
                  h(
                          'h1',
                          null,
                          ' [assets/styles] - specified in the SCSS file - I must be grey '
                  )
          );
  };

  var view = function view(state, actions) {
    return h(
      'div',
      null,
      h(
        Switch,
        null,
        h(Route, { path: '/', render: App }),
        h(Route, { path: '/page', render: Page })
      )
    );
  };

  ___$insertStyle("@charset \"UTF-8\";\n/* MATERIAL-COLORS\n========================================================================== */\n:root {\n  /* Material colors */\n  /* --red- */\n  --red-1: #ffebee;\n  /*red-lighten-1*/\n  --red-2: #ffcdd2;\n  --red-3: #ef9a9a;\n  --red-4: #e57373;\n  --red-5: #ef5350;\n  --red-6: #f44336;\n  /*red*/\n  --red-7: #e53935;\n  --red-8: #d32f2f;\n  --red-9: #c62828;\n  --red-10: #b71c1c;\n  /* --purple- */\n  --purple-1: #f3e5f5;\n  --purple-2: #e1bee7;\n  --purple-3: #ce93d8;\n  --purple-4: #ba68c8;\n  --purple-5: #ab47bc;\n  --purple-6: #9c27b0;\n  --purple-7: #8e24aa;\n  --purple-8: #7b1fa2;\n  --purple-9: #6a1b9a;\n  --purple-10: #4a148c;\n  /* --indigo- */\n  --indigo-1: #e8eaf6;\n  --indigo-2: #c5cae9;\n  --indigo-3: #9fa8da;\n  --indigo-4: #7986cb;\n  --indigo-5: #5c6bc0;\n  --indigo-6: #3f51b5;\n  --indigo-7: #3949ab;\n  --indigo-8: #303f9f;\n  --indigo-9: #283593;\n  --indigo-10: #1a237e;\n  /* --blue- */\n  --blue-1: #e3f2fd;\n  --blue-2: #bbdefb;\n  --blue-3: #90caf9;\n  --blue-4: #64b5f6;\n  --blue-5: #42a5f5;\n  --blue-6: #2196f3;\n  --blue-7: #1e88e5;\n  --blue-8: #1976d2;\n  --blue-9: #1565c0;\n  --blue-10: #0d47a1;\n  /* --teal- */\n  --teal-1: #e0f2f1;\n  --teal-2: #b2dfdb;\n  --teal-3: #80cbc4;\n  --teal-4: #4db6ac;\n  --teal-5: #26a69a;\n  --teal-6: #009688;\n  --teal-7: #00897b;\n  --teal-8: #00796b;\n  --teal-9: #00695c;\n  --teal-10: #004d40;\n  /* --green- */\n  --green-1: #e8f5e9;\n  --green-2: #c8e6c9;\n  --green-3: #a5d6a7;\n  --green-4: #81c784;\n  --green-5: #66bb6a;\n  --green-6: #4caf50;\n  --green-7: #43a047;\n  --green-8: #388e3c;\n  --green-9: #2e7d32;\n  --green-10: #1b5e20;\n  /* --yellow- */\n  --yellow-1: #fffde7;\n  --yellow-2: #fff9c4;\n  --yellow-3: #fff59d;\n  --yellow-4: #fff176;\n  --yellow-5: #ffee58;\n  --yellow-6: #ffeb3b;\n  --yellow-7: #fdd835;\n  --yellow-8: #fbc02d;\n  --yellow-9: #f9a825;\n  --yellow-10: #f57f17;\n  /* --orange- */\n  --orange-1: #fff3e0;\n  --orange-2: #ffe0b2;\n  --orange-3: #ffcc80;\n  --orange-4: #ffb74d;\n  --orange-5: #ffa726;\n  --orange-6: #ff9800;\n  --orange-7: #fb8c00;\n  --orange-8: #f57c00;\n  --orange-9: #ef6c00;\n  --orange-10: #e65100;\n  /* --brown- */\n  --brown-1: #efebe9;\n  --brown-2: #d7ccc8;\n  --brown-3: #bcaaa4;\n  --brown-4: #a1887f;\n  --brown-5: #8d6e63;\n  --brown-6: #795548;\n  --brown-7: #6d4c41;\n  --brown-8: #5d4037;\n  --brown-9: #4e342e;\n  --brown-10: #3e2723;\n  /* --grey- */\n  --grey-1: #fafafa;\n  --grey-2: #f5f5f5;\n  --grey-3: #eeeeee;\n  --grey-4: #e0e0e0;\n  --grey-5: #bdbdbd;\n  --grey-6: #9e9e9e;\n  --grey-7: #757575;\n  --grey-8: #616161;\n  --grey-9: #424242;\n  --grey-10: #212121; }\n\n/* FIN MATERIAL-COLORS\n========================================================================== */\n/* STARTER\n========================================================================== */\n/* @font-face {\n\tfont-family: \"Roboto Condensed\";\n\tsrc: url('/fonts/RobotoCondensed-Light.ttf');\n} */\n@font-face {\n  font-family: \"Raleway\";\n  src: url(\"/fonts/Raleway-Regular.ttf\"); }\n\n/* Material-icons\n========================================================================== */\n@font-face {\n  font-family: 'Material Icons';\n  font-style: normal;\n  font-weight: 400;\n  src: local(\"Material Icons\"), local(\"MaterialIcons-Regular\"), url(\"/fonts/material-icons.woff2\") format(\"woff2\"); }\n\n.material-icons {\n  font-family: 'Material Icons';\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  display: inline-block;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n  -webkit-font-feature-settings: 'liga';\n  -webkit-font-smoothing: antialiased; }\n\nhtml {\n  font-size: calc(3px + 2vmin);\n  font-family: \"Raleway\", Helvetica, Arial, Courier New, sans-serif; }\n\nbody,\nbody * {\n  box-sizing: border-box;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  /* repères */\n  /*border: 1px solid black;\n\tbackground: rgba(0,0,0,.2);\n\tpadding-top: 5px;\n\tpadding-bottom: 5px;*/\n  /* repères */\n  margin: 0;\n  border: 0;\n  padding: 0;\n  outline: 0; }\n\nbody,\nnoscript {\n  height: 100vh;\n  display: flex; }\n\nnoscript {\n  width: 100vw;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold; }\n\n/* Starter\n========================================================================== */\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\na {\n  margin-top: 0; }\n\na {\n  text-decoration: none; }\n\n/* images responsives */\nimg {\n  vertical-align: middle;\n  /*hack css pour supprimer l'espace sous les images dans un block*/ }\n\nfigure {\n  margin: 0; }\n\n/* FIN STARTER\n========================================================================== */");

  ___$insertStyle("h1 {\n  color: grey; }");

  var main = app(state, actions, view, document.getElementById('app'));

  var unsubscribe = location$1.subscribe(main.location);

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
